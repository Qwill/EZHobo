script "ezhobo.ash";
/* GLOBAL VARS */
boolean hamster; 
boolean coat;
int turns;
string rlogs = visit_url("clan_raidlogs.php");


void preadv(){
if(item_amount($item[Autumn-aton]).to_boolean()){
    print("Sending your autumn-aton!", "green");
    cli_execute("autumnaton send Shadow Rift");
}

if((have_effect($effect[Everything Looks Yellow]) == 0) && (available_amount($item[Jurassic Parka]).to_boolean())){
    print("Using your free YR!", "green");

    cli_execute("checkpoint");
    cli_execute("parka dilophosaur");
    equip($item[Jurassic Parka]);
    cli_execute("/aa none");

    string spit = "if hasskill bowl backwards; skill bowl backwards; endif; skill spit jurassic acid; abort;";
    adv1($location[Shadow Rift], -1, spit);
    if(handling_choice() == true){ run_choice(5); }
    cli_execute("outfit checkpoint");

} 

if((get_property("sweat") == 100) && (get_property("_sweatOutSomeBoozeUsed") == 3)){
    print("Sweating out some sweat!", "green");
    use_skill($skill[Make Sweat-ade]);
}

if(((get_property("_coldMedicineConsults")) <= 5) && visit_url("campground.php?action=workshed",false,true).contains_text('Extrovermectin&trade;')){
    visit_url("campground.php?action=workshed");
    run_choice(5);
} 




if(have_effect($effect[Beaten Up]).to_boolean()){
  string [int] cleaverQueue = get_property("juneCleaverQueue").split_string(",");

  if(cleaverqueue[cleaverQueue.count() - 1] == "1467" && have_skill($skill[Tongue of the Walrus])){
    use_skill(1, $skill[Tongue of the Walrus]);
  } else {
    abort("uh-oh. We lost the last combat.");
  }
}

}

void buffme(string locat){
switch(locat){
  default:
    abort("Provide a valid location!");

    
}
}


boolean asc_skip; // REMOVE  // TODO: Ascension skip, can_adventure()?
boolean sewer_finished (string playerID) {
  
  if(!asc_skip){
    return contains_text(rlogs, `(#{playerId}) made it through the sewer`);
  }
  
  return false;
}


boolean sewers(string runtype){
  if(sewer_finished(my_id())){
    print("Sewer already finished!", 'teal');
    return true;
  }

  int sewer_time_start = now_to_int();

  if(!visit_url("clan_raidlogs.php").contains_text("ASSBot")){
    if(user_confirm("ASSBot does not seem to be in the clan raidlogs. Do you wish to stop for cagebait?")){
      abort("Aborted by user.");
    }
  }

  /* INFO: For matching water level */
  matcher water_level_matcher = create_matcher("lowered the water level\\s+(\\d+)\\s+times", rlogs);
  int wlev_turns;
  while (water_level_matcher.find()){
    wlev_turns = (water_level_matcher.group(1)).to_int();
  }

  print(`Water level: {wlev_turns}0 cm / 200 cm`);
  if(wlev_turns < 20 || !hamster){
    set_property ("choiceAdventure197" , "3") ;
  } else {
    set_property( "choiceAdventure197" , "1");
  }

  /* INFO: For matching grates opened*/
  matcher sewer_grate_matcher = create_matcher("\\bopened\\s+(\\d+)\\s+sewer grates?", rlogs);
  int sewer_grate_turns;

  while(sewer_grate_matcher.find()){
    sewer_grate_turns = (sewer_grate_matcher.group(1)).to_int();
  }

  print("Grates opened: " + sewer_grate_turns);

  if(sewer_grate_turns < 20 || !hamster){
    set_property ("choiceAdventure198" , "3") ;
  } else {
    set_property( "choiceAdventure198" , "1");
  }


  int [item] sewer_consumables = {
    $item[gatorskin umbrella] : 1,
    $item[unfortunate dumplings] : 1,
    $item[sewer wad] : 1,
    $item[bottle of ooze-o] : 1,
    $item[oil of oiliness] : 3,
  }; 

  set_property("choiceAdventure199", "1");

  set_property("choiceAdventure211", ""); // We should never gnaw bars =(
  set_property("choiceAdventure212", ""); 


  maximize("-combat 25 min 30 max, 999 bonus gatorskin umbrella, 3000 bonus hobo code binder", false);


  string combat_filter = "if hasskill bowl a curveball; skill bowl a curveball; endif; if hasskill lunging-thrust smack; skill lunging-thrust smack; endif; attack; repeat !times 10";
  if(hamster){
    combat_filter = "lol runaway";
  } 


  while (!sewer_finished(my_id()) && (get_property("lastEncounter") != "At Last!")) {
    if (my_adventures() == 0 || turns <= 0){
      abort("No more turns to spend!");
    }

    foreach itm, qty in sewer_consumables{
      if(item_amount(itm) < qty && coat){
        retrieve_item(qty, itm);
      }
    }

    preadv();
    adventure(1, $location[A maze of sewer tunnels], combat_filter);
    turns--;
    
    if(!have_equipped($item[gatorskin umbrella])){
      equip($item[gatorskin umbrella]);
    }

    if(expected_damage($monster[C. H. U. M.]) > my_hp()){
      restore_hp(my_maxhp());
    }
  }

  print(`Sewers took: {floor((now_to_int() - sewer_time_start) / 60000)} minute(s) and {(floor(now_to_int() - sewer_time_start) % 60000 / 1000)} second(s)`, "lime");
  
  return sewer_finished(my_id());
}


int hobo_parts(element ele){

  string richard = visit_url("clan_hobopolis.php?place=3&action=talkrichard&whichtalk=3");	
  int hobopart_amount;

  element [string] parts = {
  "pair(s)? of charred hobo boot(s)?": $element[Hot],
  "pair(s)? of frozen hobo eyes": $element[Cold],
  "pile(s)? of stinking hobo guts": $element[Stench],
  "creepy hobo skull(s)?": $element[Spooky],
  "hobo crotch(es)?": $element[Sleaze],
  "hobo skin(s)?":$element[None],
  };


  foreach matcher_string, elem in parts{
    hobopart_amount = 0;
    matcher hoboparts = create_matcher(`Richard has <b>(\\d+)</b> {matcher_string}`, richard);
    while (hoboparts.find()) {
      hobopart_amount = hoboparts.group(1).to_int();
    }

    if(ele == elem){
      return hobopart_amount;
    }
  }

  return 0;
}


boolean confirm;
void town_square_combat(string settings) {

  string[int] arguments;
  arguments = split_string(settings, " ");

  print(`Spending {arguments[1]} turns overkiling hobos with {arguments[0]}!`, "teal"); 
  int parts_to_obtain = arguments[1].to_int();
  element elemt = arguments[0].to_element();
  string hobo_combat = "skill stuffed mortar shell; item porquoise-handled sixgun; abort";

  switch {
    default:
      abort("Provide an actual element!");

    case(elemt == $element[None]):
      use_skill($skill[Spirit of Nothing]);
      set_auto_attack("Lunging Thrust-Smack");
      break;

    case(elemt == $element[Hot]):
      use_skill($skill[Spirit of Cayenne]);
      set_auto_attack(0);
      break;

    case(elemt == $element[Cold]):
      use_skill($skill[Spirit of Peppermint]);
      set_auto_attack(0);
      break;

    case(elemt == $element[Stench]):
      use_skill($skill[Spirit of Garlic]);
      set_auto_attack(0);
      break;

    case(elemt == $element[Spooky]):
      use_skill($skill[Spirit of Wormwood]);
      set_auto_attack(0);
      break;

    case(elemt == $element[Sleaze]):
      use_skill($skill[Spirit of Bacon Grease]);
      set_auto_attack(0);
      break;
  }

  while(parts_to_obtain > 0 && !contains_text(visit_url("clan_hobopolis.php?place=2"), `clan_hobopolis.php?place={arguments[2]}`)){
    preadv();

    int expected_shell_damage = ((32) + (0.5 * my_buffedstat($stat[mysticality]))) * numeric_modifier("Spell Damage");
    if((expected_shell_damage < (500 + numeric_modifier("-Monster Level"))) && !confirm && elemt != $element[None]){
      if (!user_confirm("You may not be overkilling the hobos, are you sure you want to adventure?")){
        abort();
      }
      confirm = true;
    }

    adventure($location[Hobopolis Town Square], 1, hobo_combat);
    parts_to_obtain--;
    print(`Turns remaining for element {elemt}: {parts_to_obtain}`, "teal");
  }

}

boolean town_square(int turnss, int mapimage){
  set_property("choiceAdventure272" , "2");

  string town_map = visit_url("clan_hobopolis.php?place=2");

  if (contains_text(town_map , `clan_hobopolis.php?place={mapimage}`)){
    return true;
  }

  boolean wearing_outfit;

  foreach x, outfit in get_custom_outfits(){
    if(contains_text(outfit.to_lower_case(), "hobo")){
      outfit(outfit);
      wearing_outfit = true;
    }
  }

  
  if(!wearing_outfit){
    if(!user_confirm("Please select an outfit to wear! Or save an outfit with the 'hobo' in it's name, and it'll default swapping to that! (YES to continue with current outfit)"))
      abort("User abort.");
  }

  while(!contains_text(town_map, `clan_hobopolis.php?place={mapimage}`) && turns > 6){

    foreach elem in $elements[Hot, Cold, Stench, Spooky, Sleaze, None]{

      if(turns < 6){
        abort("Finished using all your set turns!");
      }

      if (hobo_parts(elem) < 7){
        town_square_combat(`{elem} {7 - hobo_parts(elem)} {mapimage}`);

        if (hobo_parts(elem) < 7){
          abort("We couldn't overkill the hobos. uh-oh.");
        }
      }
    }

  
    print("Launching 7 schobos!", "orange");
    visit_url("clan_hobopolis.php?place=3&action=talkrichard&whichtalk=3&preaction=simulacrum&qty=7");
  }

  return contains_text(town_map , `clan_hobopolis.php?place={mapimage}`); 
}


int hobo_lookup(string lookup){
string rlogs = visit_url("clan_raidlogs.php");

// Regex >=(
switch(lookup.to_lower_case()){
  case "tire":
    int total_tires;
    matcher tire = create_matcher("(?<=threw\\s)\\d+(?=\\stires on the fire)", rlogs);
    while(tire.find()){
      total_tires += tire.group().to_int();
    }

  return total_tires;

  case "tirevalanche":
    int total_tirevalanches;
    matcher tirevalanches = create_matcher("(\\d+) tirevalanche(s)?", rlogs);
    while(tirevalanches.find()){
      total_tirevalanches += tirevalanches.group(1).to_int();
    }

  return total_tirevalanches;

  case "diverted_water_to_pld":
    int water_diverted;
    matcher divert_water = create_matcher("diverted some cold water out of Exposure Esplanade.*?(\\d+) turn(s)?", rlogs); 
    while(divert_water.find()){
      water_diverted += divert_water.group(1).to_int();
    }

  return water_diverted;

  case "small_yodel":
    int small_yodels;
    matcher small_yodel_amount = create_matcher("yodeled a little bit.*?(\\d+) turn(s)?", rlogs); 
    while(small_yodel_amount.find()){
      small_yodels += small_yodel_amount.group(1).to_int();
    }

  return small_yodels;

  case "broke_pipe":
    int broke_pipes;
    matcher amount_broken = create_matcher("broke (\\d+) water pipe(s)?", rlogs); 
    while(amount_broken.find()){
      broke_pipes += amount_broken.group(1).to_int();
    }

  return broke_pipes;

  default:
    abort("Invalid lookup!");
}

return 1;
}

boolean burn_barrel(string runtype){

  if(visit_url("clan_hobopolis.php?place=4").contains_text("burnbarrelblvd10") || visit_url("clan_hobopolis.php?place=4").contains_text("burnbarrelblvd11")){
    return true;
  }

  set_property("choiceAdventure207", "2");	//Hot Dog!: Walk Away
  set_property("choiceAdventure213", "2");	//Piping Hot: Leave the valve alone
  set_property( "choiceAdventure201" , "2");	//Home in the Range: Leave combat with Ol' Scratch 

  maximize("-combat 25 min 30 max, 0.8 bonus lucky gold ring, 0.4 bonus mafia thumb ring, 0.3 bonus cheeng's spectacles, 0.2 bonus can of mixed everything, 0.1 bonus designer sweatpants", false);

  foreach x, outfit in get_custom_outfits(){
    if(contains_text(outfit.to_lower_case(), "burnbarrel")){
      outfit(outfit);
    }
  }



  while (turns > 1 && get_property("lastEncounter") != "Home, Home in the Range"){

    if (my_adventures() == 0 || turns <= 0){
      abort("No more alloted turns to spend!");
    }

    int tire_amount = hobo_lookup("tire");
    if(tire_amount % 34 == 0 && tire_amount > 1){

      // Eg. We have 34 tires stacked now and 34 before (1 launch before), so we need to launch 'em twice this instance. As 68 (total tires stacked) / 34 is equal to two (required launches) and 2 > 1 (launches before), we'll launch them!
      // Afterwards, tire_amount % 34 is still 0, but now there's 2 launches (before) done already, and  2 !< 2, so we skip.
      if(hobo_lookup("tirevalanche") < tire_amount / 34){
        set_property("choiceAdventure206", "1");	// Violently
      } else {
        set_property("choiceAdventure206", "2");	
      }


    } else {
      set_property("choiceAdventure206", "2");	// Gently 
    }
    
    preadv();
    
    adventure(1, $location[Burnbarrel Blvd.]);
    turns--;
  }

  return visit_url("clan_hobopolis.php?place=4").contains_text("burnbarrelblvd10") || visit_url("clan_hobopolis.php?place=4").contains_text("burnbarrelblvd11");

}

boolean exposure_esplanade(string runtype){

  if(visit_url("clan_hobopolis.php?place=5").contains_text("exposureesplanade10") || visit_url("clan_hobopolis.php?place=5").contains_text("exposureesplanade11")){
    return true;
  }

  set_property( "choiceAdventure273" , "1");	// The Frigid Air: Acquire Frozen Banquet
  set_property( "choiceAdventure217" , "1");	// There Goes Fritz: Yodel a little
  set_property( "choiceAdventure202" , "2");	// Bumpity Bump Bump: Leave combat with Frosty
  set_property( "choiceAdventure215" , "2");	// Piping Cold: Divert Water to PLD

  maximize("-combat 25 min 30 max, 0.8 bonus lucky gold ring, 0.4 bonus mafia thumb ring, 0.3 bonus cheeng's spectacles, 0.2 bonus can of mixed everything, 0.1 bonus designer sweatpants", false);

  foreach x, outfit in get_custom_outfits(){
    if(contains_text(outfit.to_lower_case(), "esplanade")){
      outfit(outfit);
    }
  }

  while (turns > 1 && get_property("lastEncounter") != "Bumpity Bump Bump"){

    if(hobo_lookup("diverted_water_to_PLD") >= 13 || get_property("ezhobo_EEBB_only") == "true"){
      set_property( "choiceAdventure215" , "3"); // Piping Cold: Go all CLUE
    }

    if(hobo_lookup("small_yodel") >= 11 && hobo_lookup("broke_pipe") % 30 == 0){ // Maybe check CLUE has broken 30 times also?
      set_property( "choiceAdventure217" , "3");	// There Goes Fritz: Yodel your heart out
    }

    preadv();

    if((expected_damage($monster[Cold Hobo]) + 200) > my_hp()){
      restore_hp(my_maxhp()); 
    }

    adventure(1, $location[Exposure Esplanade]);
    turns--;

  }

  return visit_url("clan_hobopolis.php?place=5").contains_text("exposureesplanade10") || visit_url("clan_hobopolis.php?place=5").contains_text("exposureesplanade11");
} 




print("Usage: ezhobo {run type} {turns}");
void main(string args){

  string[int] options;
  options = split_string(args, " ");
  print(`Running {options[1]} turns and attempting a {options[0]} run, in clan "{get_clan_name()}"`, "teal"); 

  turns = to_int(options[1]);
  int current_turns = my_adventures();
  string run_type = to_lower_case(options[0]);

  switch(run_type){
    default:
    abort("Invalid location selection. Valid selections include: none, coat, hamster");
    
    case "none":
    break;

    case "coat":
    coat = true;
    break;

    case "hamster":
    hamster = true;
    coat = true; 
    break;
  }
  wait(1);
 /// /// /// /// /// TEST /// /// /// /// ////




 /// /// /// /// /// TEST /// /// /// /// ////
  if(have_familiar($familiar[Red-nosed snapper]) && my_familiar() != $familiar[Red-nosed Snapper]){
    use_familiar($familiar[Red-nosed snapper]);
    visit_url('familiar.php?action=guideme&pwd'); 
    visit_url('choice.php?pwd&whichchoice=1396&option=1&cat=hobo');
  }

  set_auto_attack(0);
  set_property("currentMood", "apathetic");

  if(sewers(run_type)){
    print("The sewers have been navigated.", "orange");
  } else {
    abort("Failed trekking through the sewers due to an unknown reason...");
  }

  if(town_square(turns, 5)){
    print("There is 500 or greater kills in the square.", "orange");
  } else {
    abort("Failed killing 500 or more hobos in the town square.");
  }

  if(exposure_esplanade(run_type)){
    print("Reached frosty!", "orange");
  } else {
    abort("Failed to reach frosty in burnbarrel.");
  }

  if(burn_barrel(run_type)){
    print("Reached ol' scratch!", "orange");
  } else {
    abort("Failed to reach ol' scratch in burnbarrel.");
  }

  if(town_square(turns, 26)){
    print("There is 3000 or greater kills in the square.", "orange");
  } else {
    abort("Failed killing 3000 or more hobos in the town square.");
  }

}
